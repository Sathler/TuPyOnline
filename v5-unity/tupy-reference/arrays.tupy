### VETORES E MATRIZES ###

# A partir de um tipo de dado, podemos criar
# uma coleção homogênea. Um vetor é um conjunto
# ordenado finito, de uma dimensão, em que todos 
# os elementos possuem o mesmo tipo:

# Vetor de tamanho estático 5
inteiro V[5] <- [1, 3, 5, 7, 9]

# Vetor de tamanho dinâmico
inteiro V[*] <- [2, 4, 6]
V <- V + [8, 10]                # V = [2, 4, 6, 8, 10]

# Podemos, então, acessar ou modificar elementos
# individuais ou intervalos de um vetor:

#                0   1   2   3   4
inteiro V[5] <- [10, 20, 30, 40, 50]

V[0] <- 15                      # V = [15, 20, 30, 40, 50]
V[2..4] <- [33, 44, 55]         # V = [15, 20, 33, 44, 55]
V[*] <- [1, 2, 3]               # V = [1, 2, 3, 0, 0]
V <- [1, 2, 3]                  # é equivalente à linha anterior

# TuPy permite que elementos sejam replicados para
# preencher um intervalo arbitrário:

inteiro V[6]                    # V = [0, 0, 0, 0, 0, 0]
V[*] <- 5                       # V = [5, 5, 5, 5, 5, 5]
V[2..3] <- 10                   # V = [5, 5, 10, 10, 5, 5]

# Criando vetores de vetores obtemos matrizes,
# conjuntos ordenados finitos de duas dimensões.

# Matriz de tamanho estático 3 x 3
inteiro M[3, 3] <- [ [1, 2, 3],
                     [4, 5, 6],
                     [7, 8, 9] ]
                     
# Matriz de tamanho dinâmico
inteiro M[*, *] <- [ [1, 2, 3, 4], 
                     [5, 6, 7], 
                     [8, 9], 
                     [10] ]
                     
# É possível acessar um elemento da matriz de
# duas formas diferentes:

inteiro M[3, 3] <- [ [1, 2, 3],
                     [4, 5, 6],
                     [7, 8, 9] ]
                     
M[1, 2] <- 0  # Linha 1, coluna 2 -> elemento 6
              # (indexadas a partir do 0)
              
M[2][1] <- 0  # Linha 2, coluna 1 -> elemento 8
              # (indexadas a partir do 0)
              
# Também podemos extrair e modificar submatrizes:

inteiro M[3, 3] <- [ [1, 2, 3],
                     [4, 5, 6],
                     [7, 8, 9] ]
                     
M[1..2, 1..2] <- 0    # Submatriz 2x2 inferior direita
                      # M = [ [1, 2, 3],
                      #       [4, 0, 0],
                      #       [7, 0, 0] ]
                      
# Quando acessamos submatrizes ao invés de elementos
# individuais, é importante destacar a diferença entre
# os modos de empregar o operador de acesso:

inteiro M[3, 3] <- [ [1, 2, 3],
                     [4, 5, 6],
                     [7, 8, 9] ]

escrever(M[0..1, 2])        # Processa o recorte superior 2x1 da direita.
                            # Escreve a matriz: [ 3, 6 ]

escrever(M[0..1][2])        # Processa primeiro o recorte M[0..1], ou seja,
                            # a matriz N = [ [1, 2, 3], [4, 5, 6] ].
                            # Em seguida, busca o elemento N[2], mas
                            # como não existe o elemento de índice 2 em N,
                            # é retornado um ERRO.
