### FUN√á√ïES INTERNAS ###

# A linguagem TuPy tamb√©m conta com algumas fun√ß√µes
# embutidas que podem ser chamadas a qualquer momento
# no programa.

# Lista de fun√ß√µes dispon√≠veis:
# escrever, ler, ler_linha,
# bin√°rio, octal, hexadecimal,
# copiar, comprimento, asser√ß√£o,
# cadeia, caracter, inteiro, real, l√≥gico,
# lista, juntar, embaralhar, inserir, remover,
# sublista, ordenar, substituir
# m√≠n, m√°x, abs, aleat√≥rio, inteiro_aleat√≥rio

#----------------------------------------------------------------------
## escrever(x1, x2... xn)

# Par√¢metros:
#   arbitr√°rios

# Imprime seu retorno para a sa√≠da padr√£o.

# Retorna: Uma cadeia contendo a impress√£o dos argumentos fornecidos,
#          separados por espa√ßo.

escrever("Ol√°", "mundo!", ':', ')')      # escreve "Ol√° mundo! : )"

#----------------------------------------------------------------------
## ler(x1, x2... xn)

# Par√¢metros:
#   arbitr√°rios (todos por refer√™ncia)

# Atribui √†s vari√°veis x1 a xn os n primeiros fragmentos de entrada
# do usu√°rio lidos, em que cada fragmento √© delimitado por um ou mais
# espa√ßos, quebras de linha, ou tabula√ß√µes.

# Retorna: Um inteiro menor ou igual a n, representando a quantidade
#          de atribui√ß√µes feitas com sucesso.

ler(a, b, c)                             # atribui valores √†s vari√°veis
                                         # a, b e c caso n√£o seja atingido
                                         # o fim de arquivo.

#----------------------------------------------------------------------
## ler_linha(x)

# Par√¢metros:
#   x (cadeia)

# Atribui √† vari√°vel x o conte√∫do da pr√≥xima linha da entrada do usu√°rio.

# Retorna: Verdadeiro caso a leitura tenha sido feita com sucesso,
#          falso caso contr√°rio.

ler_linha(L)                             # atribui valor √† vari√°vel L
                                         # caso n√£o seja atingido o
                                         # fim de arquivo.

#----------------------------------------------------------------------
## copiar(x)

# Par√¢metros:
#   x (estrutura)

# Retorna: Uma nova estrutura da mesma classe de x, contendo c√≥pias dos
#          atributos contidos em x.

tipo Teste:
    inteiro x

Teste A <- Teste()                  # Instancia√ß√£o
Teste B <- A                        # B √© uma refer√™ncia a A
Teste C <- copiar(A)                # C √© uma c√≥pia de A
A.x <- 1                            # A.x = 1, B.x = 1, C.x = 0
B.x <- 2                            # A.x = 2, B.x = 2, C.x = 0
C.x <- 3                            # A.x = 2, B.x = 2, C.x = 3

#----------------------------------------------------------------------
## comprimento(x)

# Par√¢metros:
#   x (lista ou cadeia)

# Retorna: Um inteiro contendo o comprimento da lista ou cadeia x.
#          Difere do operador de cardinalidade |x| especialmente quando
#          usado em listas de duas ou mais dimens√µes. Dada uma lista L:
#           - |L| = quantos elementos primitivos existem em L
#           - comprimento(L) = quantos elementos existem em L

inteiro V[*] <- [1, 2, 3, 4]
inteiro M[*,*] <- [ [1, 2], [3, 4, 5] ]
inteiro x <- |V|                         # x = 4
inteiro x <- comprimento(V)              # x = 4
inteiro x <- |M|                         # x = 5
inteiro x <- comprimento(M)              # x = 2

#----------------------------------------------------------------------
## asser√ß√£o(x)

# Par√¢metros:
#   x (l√≥gico)

# Interrompe a execu√ß√£o do programa se a condi√ß√£o definida por x
# n√£o for atendida.

# N√£o possui retorno.

asser√ß√£o(9 < 10)      # prossegue a execu√ß√£o do programa
asser√ß√£o((2 + 2) = 5) # interrompe a execu√ß√£o do programa

#----------------------------------------------------------------------
## bin√°rio(x)

# Par√¢metros:
#   x (inteiro)

# Retorna: Uma cadeia contendo a representa√ß√£o de x na base bin√°ria.

cadeia r <- bin√°rio(106)                 # r = "1101010"

#----------------------------------------------------------------------
## octal(x)

# Par√¢metros:
#   x (inteiro)

# Retorna: Uma cadeia contendo a representa√ß√£o de x na base octal.

cadeia r <- octal(668)                   # r = "1234"

#----------------------------------------------------------------------
## hexadecimal(x)

# Par√¢metros:
#   x (inteiro)

# Retorna: Uma cadeia contendo a representa√ß√£o de x na base hexadecimal.

cadeia r <- hexadecimal(207)             # r = "CF"

#----------------------------------------------------------------------
## cadeia(x)

# Par√¢metros:
#   x (inteiro|real|caracter|l√≥gico|lista|nulo)

# Retorna: Uma representa√ß√£o de x como uma cadeia de caracteres.

cadeia r <- cadeia([1, 2, 3, 5])         # r = "[1, 2, 3, 5]"

#----------------------------------------------------------------------
## caracter(x)

# Par√¢metros:
#   x (inteiro|cadeia)

# Retorna: O caracter cujo c√≥digo ASCII/Unicode √© x.

caracter r <- caracter(0x1F4A9)          # r = 'üí©'

#----------------------------------------------------------------------
## inteiro(x)

# Par√¢metros:
#   x (real|caracter|l√≥gico)

# Retorna: O valor inteiro de x.

inteiro r <- inteiro(verdadeiro)         # r = 1

#----------------------------------------------------------------------
## inteiro(x, b = 10)

# Par√¢metros:
#   x (cadeia)
#   b (inteiro)

# Retorna: A cadeia x, como a representa√ß√£o de um inteiro na base b,
#          convertida para inteiro.

inteiro r <- inteiro("0x100", 16)        # r = 256

#----------------------------------------------------------------------
## real(x)

# Par√¢metros:
#   x (inteiro|caracter|cadeia|l√≥gico)

# Retorna: O valor de x convertido para um n√∫mero de ponto flutuante.

real r <- real("3.21")         # r = 3.21

#----------------------------------------------------------------------
## l√≥gico(x)

# Par√¢metros:
#   x (inteiro|real|caracter|cadeia)

# Retorna: Verdadeiro caso x seja diferente de zero ou cadeia vazia,
#          falso caso contr√°rio.

l√≥gico r <- l√≥gico("")                   # r = falso

#----------------------------------------------------------------------
## lista(x, s = ' ')

# Par√¢metros:
#   x (cadeia)
#   s (cadeia)

# Retorna: Uma lista resultante da parti√ß√£o da cadeia x usando s como
#          separador.

cadeia r[*] <- lista("1, 2, 3, 4", ", ") # r = ["1", "2", "3", "4"]

#----------------------------------------------------------------------
## juntar(x, s = ' ')

# Par√¢metros:
#   x (lista)
#   s (cadeia)

# Retorna: Uma cadeia resultante da concatena√ß√£o dos elementos contidos
#          em x usando s como separador. Caso x n√£o contenha cadeias,
#          os elementos ser√£o convertidos automaticamente.

cadeia r <- juntar([1, 2, 3, 4], ", ")   # r = "1, 2, 3, 4"

#----------------------------------------------------------------------
## embaralhar(x)

# Par√¢metros:
#   x (lista)

# Retorna: Uma permuta√ß√£o pseudo-aleat√≥ria dos elementos contidos em x.

inteiro r[3] <- embaralhar([1, 2, 3])    # r = [1, 2, 3] ou [1, 3, 2] ou
                                         #     [3, 1, 2] ou [2, 1, 3] ou
                                         #     [2, 3, 1] ou [3, 2, 1]

#----------------------------------------------------------------------
## inserir(L, x, pos = |L|)

# Par√¢metros:
#   L (lista)
#   x (tipo contido na lista)
#   pos (inteiro)

# Retorna: Uma c√≥pia da lista L com o elemento x inserido na posi√ß√£o pos.
#          Caso n√£o seja fornecido o par√¢metro 'pos', insere ao final da lista.

inteiro r[4] <- inserir([1, 2, 3], 4)    # r = [1, 2, 3, 4]

#----------------------------------------------------------------------
## remover(L, i)

# Par√¢metros:
#   L (lista)
#   i (inteiro)

# Retorna: Uma c√≥pia da lista L sem o elemento na i-√©sima posi√ß√£o.
#          Indexada a partir de zero.

inteiro r[*] <- remover([1, 2, 3, 4], 2) # r = [1, 2, 4]

#----------------------------------------------------------------------
## sublista(L, i = nulo, cont = nulo, passo = nulo)

# Par√¢metros:
#   L (lista)
#   i (inteiro)
#   cont (inteiro)
#   passo (inteiro)

# Retorna: Uma sublista de L a partir do elemento na i-√©sima posi√ß√£o, contendo
#          'cont' elementos. Partindo da posi√ß√£o i, ser√£o dados 'cont' passos
#          de tamanho 'passo' para obter o pr√≥ximo elemento da sublista.
#
#          Caso 'i' n√£o seja fornecido (nulo), a primeira posi√ß√£o ser√° 0.
#          Caso 'cont' n√£o seja fornecido (nulo), ser√£o dados passos at√© atingir
#           o final da lista L.
#          Caso 'passo' n√£o seja fornecido (nulo), o tamanho do passo ser√° 1.

inteiro r[*] <- sublista([1, 2, 3, 4], 2)                 # r = [3, 4]
inteiro r[*] <- sublista([1, 2, 3, 4], 1, 2)              # r = [2, 3]
inteiro r[*] <- sublista([1, 2, 3, 4], 2, nulo, -1)       # r = [3, 2, 1]

#----------------------------------------------------------------------
## ordenar(L, mapeamento = nulo)

# Par√¢metros:
#   L (lista)
#   mapeamento (fun√ß√£o)

# Retorna: Uma c√≥pia de L ordenada de forma crescente.
#
#          Caso fornecida, uma fun√ß√£o un√°ria de mapeamento ser√° aplicada a
#          cada elemento antes de processada a ordena√ß√£o. Esse mapeamento n√£o
#          altera os elementos que estar√£o na lista de retorno, ele √© usado
#          unicamente para determinar a ordem.
#
#          Caso a fun√ß√£o de mapeamento seja nula, os elementos ser√£o ordenados
#          de acordo com seus pr√≥prios valores em ordem crescente.

inteiro r[*] <- ordenar([4, 3, 2, 1])                   # r = [1, 2, 3, 4]

inteiro decrescente(inteiro x):
    retornar -x
inteiro r[*] <- ordenar([1, 2, 3, 4], decrescente)      # r = [4, 3, 2, 1]
cadeia r[*] <- ordenar(["aaa", "bb", "c"], comprimento) # r = ["c", "bb", "aaa"]

#----------------------------------------------------------------------
## substituir(c, s, r, m = nulo)

# Par√¢metros:
#   c (cadeia)
#   s (cadeia)
#   r (cadeia)
#   m (inteiro)

# Retorna: Uma c√≥pia da cadeia c, com no m√°ximo m ocorr√™ncias da subcadeia s
#          substitu√≠das pela subcadeia r.
#
#          Caso m n√£o seja fornecido (nulo), todas as ocorr√™ncias de s ser√£o
#          substitu√≠das por r.

substituir("ababa", "b", "r")                           # "arara"
substituir("ababa", "a", "e", 2)                        # "ebeba"
substituir("ababa", "aba", "")                          # "ba"

#----------------------------------------------------------------------
## m√≠n(x, y)

# Par√¢metros:
#   x, y (inteiro|real|caracter|cadeia)

# Retorna: o menor dos dois argumentos fornecidos. Para cadeias, √©
#          usada ordem lexicogr√°fica.

inteiro r <- m√≠n(-3, 2)                  # r = -3
cadeia r <- m√≠n("abc", "abb")            # r = "abb"

#----------------------------------------------------------------------
## m√°x(x, y)

# Par√¢metros:
#   x, y (inteiro|real|caracter|cadeia)

# Retorna: o maior dos dois argumentos fornecidos. Para cadeias, √©
#          usada ordem lexicogr√°fica.

inteiro r <- m√°x(-3, 2)                  # r = 2
cadeia r <- m√°x("abc", "abb")            # r = "abc"

#----------------------------------------------------------------------
## abs(x)

# Par√¢metros:
#   x (inteiro|real)

# Retorna: x, caso x seja positivo, ou -x, caso x seja negativo.

inteiro r <- abs(-3)                     # r = 3
real r <- abs(4.7)                       # r = 4.7

#----------------------------------------------------------------------
## aleat√≥rio()

# Par√¢metros:
#   nenhum

# Retorna: Um n√∫mero real pseudo-aleat√≥rio entre 0 e 1 inclusive.

real r <- aleat√≥rio()                    # r = ?

#----------------------------------------------------------------------
## aleat√≥rio(x)

# Par√¢metros:
#   x (real)

# Retorna: Um n√∫mero real pseudo-aleat√≥rio entre 0 e x inclusive.

real r <- aleat√≥rio(5.0)                 # r = ?

#----------------------------------------------------------------------
## aleat√≥rio(x, y)

# Par√¢metros:
#   x, y (real)

# Retorna: Um n√∫mero real pseudo-aleat√≥rio entre x e y inclusive.

real r <- aleat√≥rio(-5.0, 5.0)           # r = ?

#----------------------------------------------------------------------
## inteiro_aleat√≥rio(x)

# Par√¢metros:
#   x (inteiro)

# Retorna: Um n√∫mero inteiro pseudo-aleat√≥rio entre 0 e x inclusive.

inteiro r <- inteiro_aleat√≥rio(50)       # r = ?

#----------------------------------------------------------------------
## inteiro_aleat√≥rio(x, y)

# Par√¢metros:
#   x, y (inteiro)

# Retorna: Um n√∫mero inteiro pseudo-aleat√≥rio entre x e y inclusive.

inteiro r <- inteiro_aleat√≥rio(-50, 50)           # r = ?

#----------------------------------------------------------------------
