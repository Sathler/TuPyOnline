### ESTRUTURAS DE CONTROLE ###

# É possível manipular a execução do programa,
# condicionando-a aos valores de seus dados.

# O resultado de uma expressão condicional é
# expressado pelo tipo 'lógico'. Os seguintes
# operadores de comparação existem:

lógico res
res <- 2 = 2       # Igualdade
res <- 3 > 2       # Maior que
res <- 2 < 3       # Menor que
res <- 2 >= 2      # Maior ou igual
res <- 1 <= 2      # Menor ou igual
res <- 9 != 2      # Diferente

## Desvio condicional

# As estruturas "se/senão" permitem alterar o
# fluxo de execução. Se a expressão que segue
# a palavra 'se' for avaliada e retornar um
# valor 'verdadeiro', o bloco de código que
# o segue será executado. Caso contrário, é
# possível incluir uma cláusula 'senão' que
# será executada caso a expressão seja avaliada
# e retorne 'falso'.

# Usando um 'se':

se verdadeiro:
  escrever("Verdadeiro!")
  # mais comandos poderiam estar aqui!

# Usando um 'se/senão':

se verdadeiro:
  escrever("Verdadeiro!")         # Apenas este bloco de código
  #...                            # será executado.
senão:
  escrever("Falso!")
  #...
  
# É possível encadear uma sequência de condicionais
# que serão avaliados em ordem até que um deles
# seja satisfeito:

inteiro a <- 5

se a > 5:
  escrever("Maior que cinco!")
senão se a > 3:
  escrever("Entre quatro e cinco!") # Apenas este bloco de código
senão:                              # será executado.
  escrever("Três ou menos!")
  
# Deve ser destacado que TuPy considera qualquer
# valor não-zero (ou cadeia vazia) como verdadeiro
# quando utilizado em avaliações. Assim:

inteiro a <- 5
se a:
  escrever("Verdadeiro!")           # 'Verdadeiro' é impresso.
  
inteiro b <- 0
se b:
  escrever("Falso!")                # Este bloco não é executado.

## Estruturas de repetição (loops)

# Os loops 'enquanto' permitem executar
# instruções de forma repetida até que
# uma condição se invalide.

inteiro a <- 3
enquanto(a):                        # Escreve 3
  escrever(a)                       #         2
  a <- a - 1                        #         1
  
# Certifique-se que o bloco de código que
# é executado repetidamente pode fazer com que
# a condição se invalide em algum momento!
# Caso contrário, seu loop será infinito e
# sua execução é abortada, como no caso a seguir:

inteiro a <- 0
enquanto(verdadeiro):
  a <- a + 1

# Os loops 'para' permitem executar
# instruções um número predeterminado
# de vezes.

inteiro i
para i <- 1 até 5:
  escrever(i)                       # Escreve 1
                                    #         2
                                    #         3
                                    #         4
                                    #         5
  
# O exemplo acima irá atribuir, em sequência,
# os valores 1, 2, 3, 4 e 5 ao inteiro i, e
# para cada um desses valores irá executar o
# bloco indentado de código que se segue.
# Um jeito equivalente de escrever esse loop:

inteiro i
para i <- 1..5:
  escrever(i)
  
# Caso o intervalo estipulado contenha variáveis,
# elas são avaliadas uma única vez, no começo do
# loop. Isso ocorre para que, em casos de intervalo
# decrescente, o loop faça passos negativos, como
# por exemplo:

inteiro a, b <- 5, 1
inteiro i
para i <- a..b:
  escrever(i)                       # Escreve 5
                                    #         4
                                    #         3
                                    #         2
                                    #         1
                                    
# Também é possível especificar um passo customizado
# para o loop:

inteiro i
para i <- 1..10 passo 2:            # Escreve 1
  escrever(i)                       #         3
                                    #         5
                                    #         7
                                    #         9
                                    
# Além disso, dois loops aninhados podem ser
# representados em uma única linha em TuPy:

inteiro i, j
para i <- 1..3:
  para j <- 1..3:
    escrever(i, j)
    
# É equivalente a...

inteiro i, j
para i, j <- 1..3, 1..3:            # Escreve 1 1
  escrever(i, j)                    #         1 2
                                    #         1 3
                                    #         2 1
                                    #         2 2
                                    #         2 3
                                    #         3 1
                                    #         3 2
                                    #         3 3
