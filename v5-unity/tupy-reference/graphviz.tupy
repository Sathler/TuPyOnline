### ABSTRAÇÕES PERSONALIZADAS ###

# Há suporte para renderização de estruturas
# de dados usando o motor dot da ferramenta Graphviz.
# Isso foi tornado possível graças à biblioteca Viz.js.
# (https://github.com/mdaines/viz.js/)

# As funções a seguir possibilitam converter uma estrutura
# para uma cadeia contendo uma definição DOT que é
# processada automaticamente pelo visualizador e
# renderizada como imagem, viabilizado a exibição de
# abstrações personalizadas de estruturas de dados.

# O usuário também pode usar a linguagem DOT para renderizar
# estruturas arbitrárias em qualquer momento do programa
# armazenando os comandos em uma cadeia e passando-a como
# argumento para a função dot():

# dot(<comandos>)

# Experimente o seguinte código:

cadeia V <- dot("digraph G { 1 -> 2; 2 -> 3; 3 -> 1 }")

# Você pode aprender mais sobre a linguagem DOT com este
# guia (em inglês): http://www.graphviz.org/pdf/dotguide.pdf

# Para tornar a visualização mais idiomática, a palavra-chave
# 'visual' pode ser usada com a mesma semântica de 'cadeia' como
# especificador de tipo de dados.

# Para que os procedimentos de visualização não poluam a visão
# do código-fonte, especialmente em uma apresentação de um programa, é
# possível ocultá-los com marcadores compostos por '~'.
# Veja mais informações na seção 'manipulação da visualização'.

# Lista de funções disponíveis:

# vetor, pilha, fila, matriz,
# lista_encadeada, heap, árvore,
# grafo_MA, grafo_LA, digrafo_MA, digrafo_LA,
# grafo_valorado_MA, grafo_valorado_LA,
# digrafo_valorado_MA, digrafo_valorado_LA, dot

#----------------------------------------------------------------------
## vetor(V, d = [], xc = "", xf = "")

# Parâmetros:
#   V (lista unidimensional)
#   d (lista de inteiros)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, o vetor V será renderizado.
# Opcionalmente, uma ou mais posições do vetor podem ser destacadas em outra
# cor. Para isso, especifique as posições de destaque na lista d. As cadeias xc e
# xf, também opcionais, podem ser usadas para inserir comandos adicionais ao
# subprograma dot ao começo e ao final da mesma estrutura 'digraph', respectivamente.

# Na definição gerada, o vetor inteiro é uma tabela contida no nó 1.
# Cada posição do vetor pode ser referenciada por '1:vY' em que Y é o
# índice do elemento. Por exemplo, '2 -> 1:v0' cria um nó 2 que aponta
# para o primeiro elemento do vetor.

# Também é possível referenciar os cabeçalhos das colunas que estão
# identificados como '1:cY'.

inteiro V[*] <- [1, 5, 100, 7, 9]
visual X <- vetor(V)
visual X <- vetor(V, [1])
visual X <- vetor(V, [1], "node [shape=egg];")
visual X <- vetor(V, [1], "", "2 -> 1:v3:s; 2 [label=\"Veja!\"]; rankdir=\"BT\"")

#----------------------------------------------------------------------
## vetor(V, d, i, xc = "", xf = "")

# Parâmetros:
#   V (lista unidimensional)
#   d (lista de inteiros)
#   i (inteiro)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, o vetor V será renderizado,
# sendo que o cabeçalho dos índices será exibido começando a contar de 'i'.
# Os índices dos elementos nas referências 1:vY do programa GraphViz também
# são afetados pelo deslocamento de 'i'.

# As cadeias xc e xf são interpretadas da mesma maneira da função vetor acima.

inteiro V[*] <- [1, 5, 100, 7, 9]
visual X <- vetor(V[2..3], [], 2)
visual X <- vetor(V[2..3], [], 2, "node [shape=box3d];")
visual X <- vetor(V[2..3], [], 2, "", "2 -> 1:v3:s; 2 [label=\"Veja!\"]; rankdir=\"BT\"")

#----------------------------------------------------------------------
## pilha(V, d = [], xc = "", xf = "")

# Parâmetros:
#   V (lista unidimensional)
#   d (lista de inteiros)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, o vetor V será renderizado
# no formato de pilha. Os parâmetros d, xc e xf funcionam da mesma maneira como
# na função vetor.

# É importante destacar que, na definição gerada, o nó 0 é reservado e
# invisível, localizado acima da pilha.

inteiro V[*] <- [1, 5, 100, 7, 9]
visual X <- pilha(V)
visual X <- pilha(V, [1])
visual X <- pilha(V, [1], "edge [color=red];")
visual X <- pilha(V, [1], "", "2 -> 1:v3:w; 2 [label=\"Veja!\"];"
                          " {rank=\"same\"; 1; 2}")

#----------------------------------------------------------------------
## fila(V, d = [], xc = "", xf = "")

# Parâmetros:
#   V (lista unidimensional)
#   d (lista de inteiros)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, o vetor V será renderizado
# no formato de fila. Os parâmetros d, xc e xf funcionam da mesma maneira como
# na função vetor.

# É importante destacar que, na definição gerada, os nós F e C são reservados
# e invisíveis, localizados à esquerda e à direita da fila, respectivamente.

inteiro V[*] <- [1, 5, 100, 7, 9]
visual X <- fila(V)
visual X <- fila(V, [1])
visual X <- fila(V, [1], "edge [arrowhead=invodot];")
visual X <- fila(V, [1], "", "2 -> C; 2 [label=\"Começo da fila!\"];"
                         "3 -> F; 3 [label=\"Fim da fila!\"];")

#----------------------------------------------------------------------
## matriz(M, d = [], xc = "", xf = "")

# Parâmetros:
#   M (lista bidimensional)
#   d (lista de pares [x, y] de inteiros)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, a matriz M será renderizada.
# Opcionalmente, uma ou mais posições da matriz podem ser destacadas em outra
# cor. Para isso, especifique as posições de destaque na lista d. As cadeias xc
# e xf, também opcionais, podem ser usadas para inserir comandos adicionais ao
# subprograma dot ao começo e ao final da mesma estrutura 'digraph', respectivamente.

# Na definição gerada, a matriz inteira é uma tabela contida no nó 1.
# Cada posição da matriz pode ser referenciada por '1:vI_J' em que I é a
# linha e J a coluna do elemento. Por exemplo, '2 -> 1:v0_1' cria um nó 2
# que aponta para o segundo elemento da primeira linha da matriz.

# Também é possível referenciar os cabeçalhos das colunas e prefixos das
# linhas, que estão identificados como '1:cJ' e '1:rI' respectivamente.
# O identificador '1:rc' aponta para a célula vazia à esquerda do primeiro
# cabeçalho de coluna.

inteiro M[*,*] <- [ [1, 2, 7],
                    [4, 8, 5],
                    [9, 3, 6] ]
visual X <- matriz(M)
visual X <- matriz(M, [[1,2], [0,0]])
visual X <- matriz(M, [[1,2], [0,0]], "bgcolor=navy;")
visual X <- matriz(M, [[1,2], [0,0]], "", "2 -> 1:v2_2:e; 2 [label=\"Veja!\"]; "
                                      "rankdir=\"BT\"")

#----------------------------------------------------------------------
## matriz(M, d, i, j, xc = "", xf = "")

# Parâmetros:
#   M (lista bidimensional)
#   d (lista de pares [x, y] de inteiros)
#   i (inteiro)
#   j (inteiro)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, a matriz M será renderizado,
# sendo que os índices das linhas serão exibidos começando a contar de 'i', e os
# índices das colunas serão exibidos começando a contar de 'j'.
# Os índices dos elementos nas referências 1:vI_J do programa GraphViz também
# são afetados pelos deslocamentos de 'i' e de 'j'.

# As cadeias xc e xf são interpretadas da mesma maneira da função matriz acima.

inteiro M[*,*] <- [ [1, 2, 7],
                    [4, 8, 5],
                    [9, 3, 6] ]
visual X <- matriz(M[1..2, 0..1], [], 1, 0)
visual X <- matriz(M[1..2, 0..1], [], 1, 0, "rotate=90;")
visual X <- matriz(M[1..2, 0..1], [], 1, 0, "", "2 -> 1:v1_1:nw; 2 [label=\"Veja!\"];")

#----------------------------------------------------------------------
## lista_encadeada(cab, nc, np, dupl? = falso, d = [], xc = "", xf = "")

# Parâmetros:
#   cab (estrutura)
#   nc (cadeia)
#   np (cadeia)
#   dupl? (lógico)
#   d (lista de estruturas)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, a lista_encadeada partindo do
# nó 'cab' será renderizada. As cadeias nc e np devem fornecer os nomes dos atributos
# definidos na classe de cab que simbolizam, respectivamente, o valor da chave
# e a referência de próximo elemento da lista. Caso 'dupl?' seja verdadeiro, a lista
# será renderizada como duplamente encadeada.

# Na definição gerada, os nós podem ser identificados por 'sX' onde X é a posição do
# nó na lista fornecida, partindo do zero. Também é possível endereçar especificamente
# a chave de um nó usando 'sX:nc', em que nc é o valor da variável nc, o ponteiro de
# próximo usando 'sX:r', ou o ponteiro de anterior (no caso de listas duplamente
# encadeadas) usando 'sX:l'. Caso a lista não seja circular, o elemento 'nulo' (fim da
# lista) é endereçável através do nome 'null'.

# Opcionalmente, um ou mais nós podem ser destacados em outra
# cor. Para isso, inclua os nós em destaque na lista d. As cadeias xc e xf,
# também opcionais, podem ser usadas para inserir comandos adicionais que
# estarão presentes no começo e no fim do subprograma dot, respectivamente,
# dentro da estrutura principal 'digraph'.

tipo Nó:
  inteiro chv
  Nó prox

  Nó(inteiro c):
    chv <- c

Nó cab <- Nó(5)
cab.prox <- Nó(3)
cab.prox.prox <- Nó(7)
cab.prox.prox.prox <- Nó(1)

visual X <- lista_encadeada(cab, "chv", "prox")
visual X <- lista_encadeada(cab, "chv", "prox", verdadeiro)
visual X <- lista_encadeada(cab, "chv", "prox", verdadeiro, [cab.prox])
visual X <- lista_encadeada(cab, "chv", "prox", verdadeiro, [cab.prox],
                            "edge [color=\"red:blue\";]")
visual X <- lista_encadeada(cab, "chv", "prox", verdadeiro, [cab.prox],
                            "", "x [label=\"Veja!\"]; x -> s2:chv:n")

#----------------------------------------------------------------------
## heap(H, d = [], da = [], xc = "", xf = "")

# Parâmetros:
#   H (lista unidimensional)
#   d (lista de inteiros)
#   da (lista de inteiros)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, o heap H será renderizado.
# Ele será construído a partir de um vetor no qual o elemento no índice i tem
# filhos nos índices (i+1)*2 e (i+2)*2. O elemento 0 será a raiz.
# Opcionalmente, um ou mais elementos do heap podem ser destacadas em outra
# cor. Para isso, especifique os índices de destaque na lista d. Para destacar
# arestas, utilize a lista 'da'. Um elemento x na lista 'da' significa que a
# aresta que conecta o pai do elemento no índice 'da' até o elemento no índice
# 'da' será destacada.

# As cadeias xc e xf são interpretadas da mesma maneira como nas demais funções
# de visualização.

inteiro H[*] <- [10, 5, 20, 2, 7, 15, 25, 1, 3, 6, 8]
visual X <- heap(H)
visual X <- heap(H, [3, 5, 1])
visual X <- heap(H, [3, 5, 1], [2, 5, 6])
visual X <- heap(H, [3, 5, 1], [2, 5, 6], "edge [decorate=true; label=\"😊\"];")
visual X <- heap(H, [3, 5, 1], [2, 5, 6], "", "0 [shape=star];")

#----------------------------------------------------------------------
## árvore(T, nc, nf, d = [], xc = "", xf = "")

# Parâmetros:
#   T (estrutura)
#   nc (cadeia)
#   nf (cadeia)
#   d (lista de estruturas)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, a árvore com raiz T será
# renderizada. As cadeias nc e nf devem fornecer os nomes dos atributos
# definidos na classe de T que simbolizam, respectivamente, o valor da chave
# e a lista de filhos de um nó.

# Opcionalmente, um ou mais nós podem ser destacados em outra
# cor. Para isso, inclua os nós em destaque na lista d. As cadeias xc e xf,
# também opcionais, podem ser usadas para inserir comandos adicionais que
# estarão presentes no começo e no fim do subprograma dot, respectivamente,
# dentro da estrutura principal 'digraph'.

tipo Nó:
  inteiro chv
  Nó fs[*]

  Nó(inteiro c):
    chv <- c

Nó T, A, B, C, D <- Nó(5), Nó(1), Nó(3), Nó(2), Nó(4)
T.fs <- [A, B]
B.fs <- [C, D]

visual X <- árvore(T, "chv", "fs")
visual X <- árvore(T, "chv", "fs", [B])
visual X <- árvore(T, "chv", "fs", [B], "node [shape=doubleoctagon]")
visual X <- árvore(T, "chv", "fs", [B], "", "x [label=\"Veja!\"]; x -> 2")

#----------------------------------------------------------------------
## grafo_MA(M, d = [], da = [], xc = "", xf = "")

# Parâmetros:
#   M (lista bidimensional de inteiros)
#   d (lista de inteiros)
#   da (lista de pares [u, v] de inteiros)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, o grafo descrito pela
# matriz de adjacência M será renderizado. Uma aresta do grafo existe
# se M[i,j] != 0 e M[j,i] != 0.

# Opcionalmente, vértices e arestas podem ser destacados com cores.
# Para destacar vértices, preencha a lista 'd' com os índices dos vértices
# a serem destacados. Para destacar arestas, preencha a lista 'da' com
# listas da forma [u, v] para representar uma aresta entre os vértices u e v.

# As cadeias xc e xf, também opcionais, podem ser usadas para inserir comandos
# adicionais que estarão presentes no começo e no fim do subprograma dot,
# respectivamente, dentro da estrutura principal 'strict graph'.

inteiro G[5, 5] <- [ [ 0, 1, 0, 0, 1],
                     [ 1, 0, 1, 0, 0],
                     [ 0, 1, 0, 0, 0],
                     [ 0, 0, 0, 0, 0],
                     [ 1, 0, 0, 0, 1] ]

visual X <- grafo_MA(G)
visual X <- grafo_MA(G, [4])
visual X <- grafo_MA(G, [4], [[1, 2]])
visual X <- grafo_MA(G, [4], [[1, 2]], "node [style=radial;"
                                       "fillcolor=\"white:purple\"; gradientangle=270];")
visual X <- grafo_MA(G, [4], [[1, 2]], "", "3 [style=invis]")

#----------------------------------------------------------------------
## grafo_LA(L, d = [], da = [], xc = "", xf = "")

# Parâmetros:
#   L (lista bidimensional de inteiros)
#   d (lista de inteiros)
#   da (lista de pares [u, v] de inteiros)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, o grafo descrito pela
# lista de adjacência L será renderizado. Uma aresta do grafo existe
# se j ∈ L[i] e i ∈ L[j].

# Os parâmetros opcionais são equivalentes aos da função grafo_MA.

inteiro L[5, *] <- [ [1, 4],
                     [0, 2],
                     [1],
                     [],
                     [0, 4] ]

visual X <- grafo_LA(L)
visual X <- grafo_LA(L, [4])
visual X <- grafo_LA(L, [4], [[1, 2]])
visual X <- grafo_LA(L, [4], [[1, 2]], "node [shape=hexagon];")
visual X <- grafo_LA(L, [4], [[1, 2]], "", "3 [style=invis]")

#----------------------------------------------------------------------
## digrafo_MA(M, d = [], da = [], xc = "", xf = "")

# Parâmetros:
#   M (lista bidimensional de inteiros)
#   d (lista de inteiros)
#   da (lista de pares [u, v] de inteiros)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, o grafo direcionado
# descrito pela matriz de adjacência M será renderizado. Uma aresta
# do grafo de i para j existe se M[i,j] != 0.

# Os parâmetros opcionais são equivalentes aos da função grafo_MA.

inteiro D[5, 5] <- [ [0, 1, 0, 0, 0],
                     [1, 0, 0, 0, 0],
                     [0, 1, 0, 0, 1],
                     [0, 0, 0, 0, 0],
                     [1, 0, 0, 0, 1] ]

visual X <- digrafo_MA(D)
visual X <- digrafo_MA(D, [4])
visual X <- digrafo_MA(D, [4], [[2, 1]])
visual X <- digrafo_MA(D, [4], [[2, 1]], "edge [style=tapered; penwidth=5];")
visual X <- digrafo_MA(D, [4], [[2, 1]], "", "3 [style=invis]")

#----------------------------------------------------------------------
## digrafo_LA(L, d = [], da = [], xc = "", xf = "")

# Parâmetros:
#   L (lista bidimensional de inteiros)
#   d (lista de inteiros)
#   da (lista de pares [u, v] de inteiros)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, o grafo direcionado
# descrito pela lista de adjacência L será renderizado. Uma aresta
# do grafo de i para j existe se j ∈ L[i].

# Os parâmetros opcionais são equivalentes aos da função grafo_MA.

inteiro L[5, *] <- [ [1],
                     [0],
                     [1, 4],
                     [],
                     [0, 4] ]

visual X <- digrafo_LA(L)
visual X <- digrafo_LA(L, [4])
visual X <- digrafo_LA(L, [4], [[2, 1]])
visual X <- digrafo_LA(L, [4], [[2, 1]], "node [shape=note];")
visual X <- digrafo_LA(L, [4], [[2, 1]], "", "3 [style=invis]")

#----------------------------------------------------------------------
## grafo_valorado_MA(M, d = [], da = [], xc = "", xf = "")

# Parâmetros:
#   M (lista bidimensional de inteiros)
#   d (lista de inteiros)
#   da (lista de pares [u, v] de inteiros)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, o grafo valorado
# descrito pela matriz de adjacência M será renderizado. Uma aresta do
# grafo existe com peso M[i,j] se M[i,j] != 0 e M[j,i] != 0.

# Os parâmetros opcionais são equivalentes aos da função grafo_MA.

inteiro G[5, 5] <- [ [ 0, 4, 0, 0, 8],
                     [ 4, 0, 7, 0, 0],
                     [ 0, 7, 0, 0, 0],
                     [ 0, 0, 0, 0, 0],
                     [ 8, 0, 0, 0, 10] ]

visual X <- grafo_valorado_MA(G)
visual X <- grafo_valorado_MA(G, [4])
visual X <- grafo_valorado_MA(G, [4], [[1, 2]])
visual X <- grafo_valorado_MA(G, [4], [[1, 2]], "edge [style=dashed]")
visual X <- grafo_valorado_MA(G, [4], [[1, 2]], "", "3 [style=invis]")

#----------------------------------------------------------------------
## grafo_valorado_LA(L, d = [], da = [], xc = "", xf = "")

# Parâmetros:
#   L (lista tridimensional de inteiros)
#   d (lista de inteiros)
#   da (lista de pares [u, v] de inteiros)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, o grafo valorado
# descrito pela lista de adjacência L será renderizado. Uma aresta do
# grafo existe com peso w se [j, w] ∈ L[i] e [i, _] ∈ L[j].

# Os parâmetros opcionais são equivalentes aos da função grafo_MA.

inteiro L[5, *, 2] <- [ [[1, 4], [4, 8]],
                        [[0, 4], [2, 7]],
                        [[1, 7]],
                        [],
                        [[0, 8], [4, 10]] ]

visual X <- grafo_valorado_LA(L)
visual X <- grafo_valorado_LA(L, [4])
visual X <- grafo_valorado_LA(L, [4], [[1, 2]])
visual X <- grafo_valorado_LA(L, [4], [[1, 2]], "node [shape=cylinder];")
visual X <- grafo_valorado_LA(L, [4], [[1, 2]], "", "3 [style=invis]")

#----------------------------------------------------------------------
## digrafo_valorado_MA(M, d = [], da = [], xc = "", xf = "")

# Parâmetros:
#   M (lista bidimensional de inteiros)
#   d (lista de inteiros)
#   da (lista de pares [u, v] de inteiros)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, o grafo valorado e
# direcionado descrito pela matriz de adjacência M será renderizado.
# Uma aresta do grafo de i para j existe com peso M[i,j] se M[i,j] != 0.

# Os parâmetros opcionais são equivalentes aos da função grafo_MA.

inteiro D[5, 5] <- [ [0, 4, 0, 0, 0],
                     [5, 0, 0, 0, 0],
                     [0, 8, 0, 0, 9],
                     [0, 0, 0, 0, 0],
                     [-1, 0, 0, 0, 7] ]

visual X <- digrafo_valorado_MA(D)
visual X <- digrafo_valorado_MA(D, [4])
visual X <- digrafo_valorado_MA(D, [4], [[2, 1]])
visual X <- digrafo_valorado_MA(D, [4], [[2, 1]], "node [style=wedged; "
                                                  "fillcolor=\"green:yellow:blue\"];")
visual X <- digrafo_valorado_MA(D, [4], [[2, 1]], "", "3 [style=invis]")

#----------------------------------------------------------------------
## digrafo_valorado_LA(L, d = [], da = [], xc = "", xf = "")

# Parâmetros:
#   L (lista tridimensional de inteiros)
#   d (lista de inteiros)
#   da (lista de pares [u, v] de inteiros)
#   xc (cadeia)
#   xf (cadeia)

# Retorna: Uma cadeia com a descrição da estrutura a ser renderizada.

# Caso a cadeia seja armazenada em uma variável, o grafo valorado e
# direcionado descrito pela lista de adjacência L será renderizado.
# Uma aresta do grafo existe com peso w se [j, w] ∈ L[i] e [i, _] ∈ L[j].

# Os parâmetros opcionais são equivalentes aos da função grafo_MA.

inteiro L[5, *, 2] <- [ [[1, 4]],
                        [[0, 5]],
                        [[1, 8], [4, 9]],
                        [],
                        [[0, -1], [4, 7]] ]

visual X <- digrafo_valorado_LA(L)
visual X <- digrafo_valorado_LA(L, [4])
visual X <- digrafo_valorado_LA(L, [4], [[2, 1]])
visual X <- digrafo_valorado_LA(L, [4], [[2, 1]], "node [shape=polygon; peripheries=2; "
                                                  "sides=7; skew=-0.4; distortion=0.7];")
visual X <- digrafo_valorado_LA(L, [4], [[2, 1]], "", "3 [style=invis]")

#----------------------------------------------------------------------
## dot(S)

# Parâmetros:
#   S (cadeia)

# Retorna: A cadeia S de forma a ser interpretada como instruções DOT
#          que serão renderizadas no navegador.

# Armazene o retorno da função em uma variável para exibir a imagem
# resultante na visualização. O exemplo mais trivial é o de grafo
# não direcionado:

visual X <- dot("graph {A -- B; B -- C; A -- C;}")

# Também podemos construir um grafo direcionado (digrafo):

visual X <- dot("digraph {A -> B; B -> C; A -> C;}")

# Podemos alterar propriedades de nós individuais:

visual X <- dot("graph {A [shape=triangle, style=filled, fillcolor=green];"
                "       B [style=wedged, fillcolor=\"cyan:blue:navy\""
                "          label=\"Teste\", fontcolor=white];"
                "       A -- B}")

# Note que é possível o uso de múltiplas linhas para melhor legibilidade.
# Também é necessário que aspas (") estejam precedidas pelo caracter de
# escape (\) quando elas estiverem contidas na descrição DOT.

# Arestas também possuem certas propriedades:

visual X <- dot("graph {A -- B [style=dashed, dir=back, penwidth=8]}")

# Para uma lista completa de atributos DOT suportados,
# visite https://www.graphviz.org/doc/info/attrs.html .

# Embora mais complexo, também é possível estilizar um nó para que seja
# exibido como uma tabela, e seu conteúdo deve ser descrito através
# de um subconjunto da sintaxe HTML:

visual X <- dot("graph {T [shape=plaintext, label="
                "  <<TABLE BORDER='2' CELLSPACING='5'>"
                "    <TR>"
                "      <TD><FONT POINT-SIZE='20'><I> Um </I></FONT></TD>"
                "      <TD BORDER='0'><FONT COLOR='RED'> Dois </FONT></TD>"
                "    </TR>"
                "    <TR>"
                "      <TD><FONT FACE='Courier'> Três </FONT></TD>"
                "      <TD BGCOLOR='GRAY:WHITE' GRADIENTANGLE='45'> Quatro </TD>"
                "    </TR>"
                "  </TABLE>>]}")

# Para uma lista completa de atributos HTML suportados,
# visite https://www.graphviz.org/doc/info/shapes.html#html .

#----------------------------------------------------------------------
